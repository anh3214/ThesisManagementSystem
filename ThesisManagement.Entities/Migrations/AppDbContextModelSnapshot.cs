// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThesisManagement.Entities.Db;

#nullable disable

namespace ThesisManagement.Entities.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ThesisManagement.Entities.Committee", b =>
                {
                    b.Property<Guid>("CommitteeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DefenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CommitteeID");

                    b.ToTable("Committees");
                });

            modelBuilder.Entity("ThesisManagement.Entities.CommitteeMember", b =>
                {
                    b.Property<Guid>("CommitteeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LecturerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("CommitteeID", "LecturerID");

                    b.HasIndex("LecturerID");

                    b.ToTable("CommitteeMembers");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Defense", b =>
                {
                    b.Property<Guid>("DefenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommitteeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DefenseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RegistrationID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DefenseID");

                    b.HasIndex("CommitteeID");

                    b.HasIndex("RegistrationID")
                        .IsUnique();

                    b.ToTable("Defenses");
                });

            modelBuilder.Entity("ThesisManagement.Entities.DefenseScore", b =>
                {
                    b.Property<Guid>("DefenseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LecturerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("DefenseID", "LecturerID");

                    b.HasIndex("LecturerID");

                    b.ToTable("DefenseScores");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Evaluation", b =>
                {
                    b.Property<Guid>("EvaluationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EvaluatorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MilestoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("EvaluationID");

                    b.HasIndex("EvaluatorID");

                    b.HasIndex("MilestoneId");

                    b.HasIndex("RegistrationID");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Lecturer", b =>
                {
                    b.Property<Guid>("LecturerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LecturerID");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Milestone", b =>
                {
                    b.Property<Guid>("MilestoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("MilestoneID");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Registration", b =>
                {
                    b.Property<Guid>("RegistrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TopicID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RegistrationID");

                    b.HasIndex("GroupID");

                    b.HasIndex("TopicID");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("ThesisManagement.Entities.ScoreWeight", b =>
                {
                    b.Property<Guid>("WeightID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AdvisorWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CommitteeWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReviewerWeight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("WeightID");

                    b.ToTable("ScoreWeights");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Student", b =>
                {
                    b.Property<Guid>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("GroupID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MSSV")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("StudentID");

                    b.HasIndex("GroupID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ThesisManagement.Entities.StudentGroup", b =>
                {
                    b.Property<Guid>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AdvisorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommiteID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CommiteeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GroupLeaderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("GroupID");

                    b.HasIndex("AdvisorID");

                    b.HasIndex("CommiteID");

                    b.HasIndex("GroupLeaderID");

                    b.ToTable("StudentGroups");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Submission", b =>
                {
                    b.Property<Guid>("SubmissionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DocumentPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MilestoneID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegistrationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubmissionID");

                    b.HasIndex("MilestoneID");

                    b.HasIndex("RegistrationID");

                    b.HasIndex("StudentID");

                    b.ToTable("Submissions");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Topic", b =>
                {
                    b.Property<Guid>("TopicID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LecturerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TopicID");

                    b.HasIndex("LecturerID");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("ThesisManagement.Entities.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ThesisManagement.Entities.CommitteeMember", b =>
                {
                    b.HasOne("ThesisManagement.Entities.Committee", "Committee")
                        .WithMany("CommitteeMembers")
                        .HasForeignKey("CommitteeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThesisManagement.Entities.Lecturer", "Lecturer")
                        .WithMany("CommitteeMembers")
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Defense", b =>
                {
                    b.HasOne("ThesisManagement.Entities.Committee", "Committee")
                        .WithMany("Defenses")
                        .HasForeignKey("CommitteeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThesisManagement.Entities.Registration", "Registration")
                        .WithOne("Defense")
                        .HasForeignKey("ThesisManagement.Entities.Defense", "RegistrationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("ThesisManagement.Entities.DefenseScore", b =>
                {
                    b.HasOne("ThesisManagement.Entities.Defense", "Defense")
                        .WithMany("DefenseScores")
                        .HasForeignKey("DefenseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThesisManagement.Entities.Lecturer", "Lecturer")
                        .WithMany("DefenseScores")
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Defense");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Evaluation", b =>
                {
                    b.HasOne("ThesisManagement.Entities.Lecturer", "Evaluator")
                        .WithMany("Evaluations")
                        .HasForeignKey("EvaluatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThesisManagement.Entities.Milestone", "Milestone")
                        .WithMany("Evaluations")
                        .HasForeignKey("MilestoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThesisManagement.Entities.Registration", "Registration")
                        .WithMany("Evaluations")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Evaluator");

                    b.Navigation("Milestone");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Lecturer", b =>
                {
                    b.HasOne("ThesisManagement.Entities.User", "User")
                        .WithOne("Lecturer")
                        .HasForeignKey("ThesisManagement.Entities.Lecturer", "LecturerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Registration", b =>
                {
                    b.HasOne("ThesisManagement.Entities.StudentGroup", "Group")
                        .WithMany("Registration")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThesisManagement.Entities.Topic", "Topic")
                        .WithMany("Registrations")
                        .HasForeignKey("TopicID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Student", b =>
                {
                    b.HasOne("ThesisManagement.Entities.StudentGroup", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ThesisManagement.Entities.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("ThesisManagement.Entities.Student", "StudentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ThesisManagement.Entities.StudentGroup", b =>
                {
                    b.HasOne("ThesisManagement.Entities.Lecturer", "Advisor")
                        .WithMany()
                        .HasForeignKey("AdvisorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ThesisManagement.Entities.Committee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommiteID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ThesisManagement.Entities.Student", "GroupLeader")
                        .WithMany()
                        .HasForeignKey("GroupLeaderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Advisor");

                    b.Navigation("Committee");

                    b.Navigation("GroupLeader");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Submission", b =>
                {
                    b.HasOne("ThesisManagement.Entities.Milestone", "Milestone")
                        .WithMany("Submissions")
                        .HasForeignKey("MilestoneID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThesisManagement.Entities.Registration", "Registration")
                        .WithMany("Submissions")
                        .HasForeignKey("RegistrationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThesisManagement.Entities.Student", null)
                        .WithMany("Submissions")
                        .HasForeignKey("StudentID");

                    b.Navigation("Milestone");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Topic", b =>
                {
                    b.HasOne("ThesisManagement.Entities.Lecturer", "Lecturer")
                        .WithMany("Topics")
                        .HasForeignKey("LecturerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Committee", b =>
                {
                    b.Navigation("CommitteeMembers");

                    b.Navigation("Defenses");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Defense", b =>
                {
                    b.Navigation("DefenseScores");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Lecturer", b =>
                {
                    b.Navigation("CommitteeMembers");

                    b.Navigation("DefenseScores");

                    b.Navigation("Evaluations");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Milestone", b =>
                {
                    b.Navigation("Evaluations");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Registration", b =>
                {
                    b.Navigation("Defense")
                        .IsRequired();

                    b.Navigation("Evaluations");

                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Student", b =>
                {
                    b.Navigation("Submissions");
                });

            modelBuilder.Entity("ThesisManagement.Entities.StudentGroup", b =>
                {
                    b.Navigation("Registration");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ThesisManagement.Entities.Topic", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("ThesisManagement.Entities.User", b =>
                {
                    b.Navigation("Lecturer")
                        .IsRequired();

                    b.Navigation("Student")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
